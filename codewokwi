#include <WiFi.h>               // Inclui a biblioteca WiFi para conectar o ESP32 à rede Wi-Fi.
#include <PubSubClient.h>       // Inclui a biblioteca PubSubClient para comunicação MQTT.


#define TRIGGER_PIN  5   // Define o pino GPIO 5 como o pino de Trigger (disparo) do sensor ultrassônico HC-SR04.
#define ECHO_PIN 18      // Define o pino GPIO 18 como o pino de Echo (retorno) do sensor ultrassônico HC-SR04.
#define RELAY_PIN 2    // Define o pino GPIO 13 como o pino de controle do relé para ativar/desativar a válvula.


const char* ssid = "Wokwi-GUEST";                    // Define o SSID da rede Wi-Fi que o ESP32 irá conectar.
const char* password = "";               // Define a senha da rede Wi-Fi.
const char* mqtt_server = "broker.hivemq.com";    // Define o servidor MQTT a ser utilizado.
const char* mqtt_client_id = "ESP32Client";       // Define o ID único do cliente MQTT (necessário para o cliente MQTT se identificar no broker).
const char* topic_nivel_agua = "iot/reservatorio/nivel";  // Define o tópico MQTT para enviar o nível de água.
const char* topic_rele = "iot/reservatorio/rele";  // Define o tópico MQTT para controlar a válvula.


WiFiClient espClient;                // Cria uma instância de WiFiClient para comunicação via Wi-Fi.
PubSubClient client(espClient);      // Cria uma instância de PubSubClient, utilizando o WiFiClient para a comunicação MQTT.


void setup_wifi() {
    Serial.print("Conectando ao WiFi...");  // Inicia a mensagem de conexão ao Wi-Fi.
    WiFi.begin(ssid, password);             // Tenta conectar-se à rede Wi-Fi usando SSID e senha fornecidos.
    while (WiFi.status() != WL_CONNECTED) { // Enquanto não estiver conectado à rede...
        delay(500);                         // Espera meio segundo entre as tentativas.
        Serial.print(".");                  // Exibe um ponto no Serial Monitor a cada tentativa.
    }
    Serial.println("\nConectado ao WiFi!"); // Exibe a mensagem quando a conexão Wi-Fi for bem-sucedida.
}


void reconnect_mqtt() {
    while (!client.connected()) {          // Enquanto não estiver conectado ao broker MQTT...
        Serial.print("Conectando ao MQTT...");  // Inicia a mensagem de conexão MQTT.
        if (client.connect(mqtt_client_id)) {   // Tenta se conectar ao broker MQTT usando o client_id.
            Serial.println("Conectado ao MQTT"); // Exibe a mensagem de sucesso.
        } else {
            Serial.print("Falha na conexão MQTT. Tentando novamente em 5s..."); // Exibe a mensagem de falha.
            delay(5000);                           // Aguarda 5 segundos antes de tentar novamente.
        }
    }
}


void setup() {
    Serial.begin(115200);             // Inicializa a comunicação serial a 115200 baud rate para depuração.
    pinMode(TRIGGER_PIN, OUTPUT);      // Configura o pino de Trigger como saída.
    pinMode(ECHO_PIN, INPUT);         // Configura o pino de Echo como entrada.
    pinMode(RELAY_PIN, OUTPUT);       // Configura o pino de controle do relé como saída.


    setup_wifi();                     // Chama a função para conectar ao Wi-Fi.
    client.setServer(mqtt_server, 1883); // Define o servidor MQTT e a porta (1883 é a porta padrão do MQTT).
    client.setCallback(callback);      // Define a função de callback a ser chamada quando uma mensagem for recebida via MQTT.
}


// Função de callback chamada quando uma mensagem é recebida em um tópico MQTT.
void callback(char* topic, byte* message, unsigned int length) {
    String messageTemp = "";                // Cria uma variável String para armazenar a mensagem recebida.
    for (int i = 0; i < length; i++) {      // Converte os bytes recebidos em uma string.
        messageTemp += (char)message[i];
    }


    Serial.print("Mensagem recebida [");    // Exibe o tópico e a mensagem no monitor serial.
    Serial.print(topic);
    Serial.print("] ");
    Serial.println(messageTemp);


    // Verifica se o tópico recebido é o de controle do relé.
    if (String(topic) == topic_rele) {
        // Se a mensagem for "Válvula ativada", ativa o relé.
        if (messageTemp == "Válvula ativada") {
            digitalWrite(RELAY_PIN, HIGH);
        }
        // Se a mensagem for "Usando água da chuva", desativa o relé.
        else if (String(topic) == "Usando água da chuva") {
            digitalWrite(RELAY_PIN, LOW);
        }
    }
}


// Função para ler a distância do sensor ultrassônico.
long readUltrasonicDistance(int triggerPin, int echoPin) {
    digitalWrite(triggerPin, LOW);           // Garante que o pino Trigger está em LOW antes de começar.
    delayMicroseconds(2);                    // Espera 2 microssegundos para garantir estabilidade.
    digitalWrite(triggerPin, HIGH);          // Dispara o sensor enviando um pulso HIGH.
    delayMicroseconds(10);                   // Mantém o pulso HIGH por 10 microssegundos.
    digitalWrite(triggerPin, LOW);           // Termina o pulso de Trigger.
    return pulseIn(echoPin, HIGH) * 0.034 / 2; // Mede o tempo que o Echo leva para retornar, convertendo para distância em cm.
}


void loop() {
    if (!client.connected()) {              // Verifica se o cliente MQTT está conectado.
        reconnect_mqtt();                   // Se não estiver, tenta se conectar.
    }
    client.loop();                           // Mantém a comunicação com o broker MQTT ativa.


    long distance = readUltrasonicDistance(TRIGGER_PIN, ECHO_PIN);  // Lê a distância do sensor ultrassônico.
    Serial.print("Distância medida: ");      // Exibe a distância no Serial Monitor.
    Serial.print(distance);
    Serial.println(" cm");


    char msg[50];                            // Cria uma variável para armazenar a mensagem a ser publicada.
    snprintf(msg, 50, "{\"distancia\": %ld}", distance); // Formata a mensagem com o valor da distância.
    client.publish(topic_nivel_agua, msg);    // Publica a distância medida no tópico MQTT de nível de água.


    // Se a distância for menor que 20 cm, ativa o relé e publica a mensagem "Válvula ativada".
    if (distance < 20) {
        digitalWrite(RELAY_PIN, HIGH);       // Ativa o relé (válvula).
        client.publish(topic_rele, "Válvula ativada"); // Publica que a válvula foi ativada.
        Serial.println("Válvula ativada - Trocando para água potável");
    }
    // Se a distância for menor ou igual a 10 cm, desativa o relé e publica a mensagem "Usando água da chuva".
    else {
        digitalWrite(RELAY_PIN, LOW);        // Desativa o relé (válvula).
        client.publish(topic_rele, "Usando água da chuva"); // Publica que está usando água da chuva.
        Serial.println("Usando água da chuva");
    }
    delay(5000);  // Aguarda 5 segundos antes de realizar a próxima leitura.
}



